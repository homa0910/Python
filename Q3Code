require(XLConnect)
require(MASS)
require(lmtest)
require(caret)
library(MKmisc)


setwd('C:/Users/Thao/OneDrive/Job Search 2016/UberInterview')
data = read.csv('C:/Users/Thao/OneDrive/Job Search 2016/UberInterview/ds_challenge_v2_1_data.csv',na.strings=c('','NA'))

data$signup_date = as.Date(data$signup_date, format='%m/%d/%Y')
data$first_completed_date = as.Date(data$first_completed_date, format='%m/%d/%Y')
data$bgc_date = as.Date(data$bgc_date, format='%m/%d/%Y')
data$vehicle_added_date = as.Date(data$vehicle_added_date, format='%m/%d/%Y')

data$signup_to_completed = as.numeric(data$first_completed_date - data$signup_date)
data$signup_to_bgc = as.numeric(data$bgc_date - data$signup_date)
data$signup_to_veh = as.numeric(data$vehicle_added_date - data$signup_date)


### Add binary indicator for whether or not a driver signed up completed first trip
data$first_completed = ifelse(!is.na(data$first_completed_date),1,0)
data$bgc = ifelse(!is.na(data$bgc_date),1,0)
data$vehicle_added = ifelse(!is.na(data$vehicle_added_date),1,0)
data$vehicle_make_bin = ifelse(!is.na(data$vehicle_make),1,0)
data$vehicle_model_bin = ifelse(!is.na(data$vehicle_model),1,0)
data$vehicle_year_bin = ifelse(!is.na(data$vehicle_year),1,0)

### Some crosstabs
crosstab1 = cbind(table(data$first_completed,data$bgc),
                  table(data$first_completed,data$vehicle_added),
                  table(data$first_completed,data$vehicle_make_bin),
                  table(data$first_completed,data$vehicle_model_bin),
                  table(data$first_completed,data$vehicle_year_bin),
                  table(data$first_completed,data$city_name),
                  table(data$first_completed,data$signup_channel),
                  table(data$first_completed,data$signup_os))

# #write.csv(crosstab1,'Original Data Crosstabs.csv')


### clean data with bad vehicle_make = bike, bicycle, walker, autobot
location.bad.vehicle = which(data$vehicle_make %in% c('Bicycle','Bike','Walker','Autobot'))
clean.data = data[-location.bad.vehicle,]

### Clean data with all NA in bgc_date
location.bga.na = which(is.na(clean.data$bgc_date))
clean.data = clean.data[-location.bga.na,]

### Clean data with all NA in vehicle_added_date
location.vehicle.na = which(is.na(clean.data$vehicle_added_date))
clean.data = clean.data[-location.vehicle.na,]

### Clean data with vehicle_year=0
location.vehicle.year0 = which(clean.data$vehicle_year==0)
clean.data = clean.data[-location.vehicle.year0,]

### Add vehicle classification
clean.data$vehicle_class = NA
clean.data$vehicle_class[which(clean.data$vehicle_make %in% 
                           c('Acura','Audi','Bentley','BMW','Cadillac','Hummer','Infinity',
                             'Jaguar','Jeep','Lexus','Lincoln','Maserati','Mercedes-Benz','Porsche'))] = 'luxury'
clean.data$vehicle_class[which(clean.data$vehicle_make %in% 
                           c('Buick','Chevrolet','Chrysler','Dodge','Fiat','Ford','GMC','Honda','Huyndai','Isuzu',
                             'Kia','Land Rover','Mazda','Mercury','Mini','Mitsubishi','Nissan','Oldsmobile',
                             'Pontiac','Saab','Saturn','Scion','Subaru','Suzuki','Tesla','Toyota','Volkswagen','Volvo'))] = 'commercial'


### Combine vehicles into group according to their popularity
count = table(clean.data$vehicle_make)

clean.data$vehicle_pop = NA
clean.data$vehicle_pop[which(clean.data$vehicle_make %in% names(count)[which(count<100)])] = 'Popular_1'
clean.data$vehicle_pop[which(clean.data$vehicle_make %in% names(count)[which(count>99)])] = 'Popular_2'


### Combine any vehicle with less than 30 incidences into "Other"
# clean.data$vehicle_make_new = clean.data$vehicle_make
# 
# c('Bentley','Fiat','Hummer','Isuzu','Jaguar','Land Rover',
#   'Maserati','Mercuy','Mini','Oldsmobile','Pontiac','Porsche',
#   'Saab','Suzuki','Tesla')
# 
# clean.data$vehicle_make_new[which(clean.data$vehicle_make == 'Bentley')] = as.string('other')
# 
# clean.data$vehicle_make_new[which(is.na(clean.data$vehicle_make_new))] = clean.data$vehicle_make[which(is.na(clean.data$vehicle_make_new))]


#write.csv(clean.data,'final_data.csv')


### More crosstabs
table(clean.data$first_completed,clean.data$vehicle_added)
table(clean.data$first_completed,clean.data$vehicle_make_bin)

veh.make.table = table(clean.data$first_completed,clean.data$vehicle_make)
veh.year.table = table(clean.data$first_completed,clean.data$vehicle_year)
veh.class.table = table(clean.data$first_completed,clean.data$vehicle_class)
veh.pop.table = table(clean.data$first_completed,clean.data$vehicle_pop)
city.table = table(clean.data$first_completed,clean.data$city_name)
channel.table = table(clean.data$first_completed,clean.data$signup_channel)
os.table = table(clean.data$first_completed,clean.data$signup_os)

crosstab2 = cbind(rbind(veh.make.table[1,]/table(clean.data$vehicle_make),
                        veh.make.table[2,]/table(clean.data$vehicle_make)),
                  rbind(veh.year.table[1,]/table(clean.data$vehicle_year),
                        veh.year.table[2,]/table(clean.data$vehicle_year)),
                  rbind(veh.class.table[1,]/table(clean.data$vehicle_class),
                        veh.class.table[2,]/table(clean.data$vehicle_class)),
                  rbind(veh.pop.table[1,]/table(clean.data$vehicle_pop),
                        veh.pop.table[2,]/table(clean.data$vehicle_pop)),
                  rbind(city.table[1,]/table(clean.data$city_name),
                        city.table[2,]/table(clean.data$city_name)),
                  rbind(channel.table[1,]/table(clean.data$signup_channel),
                        channel.table[2,]/table(clean.data$signup_channel)),
                  rbind(os.table[1,]/table(clean.data$signup_os),
                        os.table[2,]/table(clean.data$signup_os)))

#write.csv(crosstab2,'crosstab2.csv')


### Proportion who took first trips
p.all.first = table(data$first_completed)[2]/nrow(data)

###############################################################################################
####################      Functions         #################################################
###############################################################################################
lrtest = function(fit1, fit2){
  cat('Assumption: Model 1 nested within Model 2')
  rslt = anova(fit1, fit2)
  rslt = cbind(rslt, c('',round(pchisq(rslt[2,4],rslt[2,3],lower.tail=FALSE), 4)))
  rslt[,2] = round(rslt[,2],3)
  rslt[,4] = round(rslt[,4],3)
  rslt[1,3:4] = c('','')
  names(rslt)[5] = 'pValue'
  rslt
}

expfit = function(model){
  coef = summary(model)$coef
  ci95.lo = exp(coef[,1] - qnorm(.975)*coef[,2])
  ci95.hi = exp(coef[,1] + qnorm(.975)*coef[,2])
  rslt = cbind(exp(coef[,1]), ci95.lo, ci95.hi, coef[,3:4])
  colnames(rslt)[1] = 'exp(est)'
  rslt
}


###############################################################################################
####################      Building model         #################################################
###############################################################################################
### Split data to training vs testing
Train <- createDataPartition(clean.data$first_completed, p=0.75, list=FALSE)
training <- clean.data[Train, ]
testing <- clean.data[-Train, ]

training$vehicle_year = training$vehicle_year - 1995
### Logistic Regression
fit1 = glm(first_completed ~ signup_to_veh + signup_to_bgc + vehicle_year + factor(signup_channel) + factor(signup_os) + factor(vehicle_make) + factor(city_name),
           data = training, family = binomial(link='logit'))

fit2 = glm(first_completed ~ signup_to_bgc + vehicle_year + factor(signup_channel) + factor(signup_os) + factor(city_name),
           data = training, family = binomial(link='logit'))

fit3 = glm(first_completed ~  (signup_to_bgc) + (vehicle_year) + factor(signup_channel) + factor(signup_os) ,
           data = training, family = binomial(link='logit'))

fit4 = glm(first_completed ~ signup_to_veh+ signup_to_bgc+vehicle_year + factor(signup_channel) + factor(signup_os) ,
           data = training, family = binomial(link='logit'))


pred.1 = predict(fit1, type='response')
pred.2 = predict(fit2, type='response')
pred.3 = predict(fit3, type='response')
pred.4 = predict(fit4, type='response')

pred.fit1 = ifelse(pred.1 > 0.5, 1, 0)
pred.fit2 = ifelse(pred.2 > 0.5, 1, 0)
pred.fit3 = ifelse(pred.3 > 0.5, 1, 0)
pred.fit4 = ifelse(pred.4 > 0.5, 1, 0)


###############################################################################################
####################      Diagnostics         #################################################
###############################################################################################
### Predicted vs Actual values
# actual.comp.loc = which(clean.data$first_completed==1)
# pred.comp.loc.1 = which(pred.fit1==1)
# pred.comp.loc.2 = which(pred.fit2==1)
# pred.comp.loc.3 = which(pred.fit3==1)
# pred.comp.loc.4 = which(pred.fit4==1)
# 
# 
# ###
# table(pred.fit1)
# table(pred.fit2)
# table(pred.fit3)
# table(pred.fit4)
# 
# ###
# table(pred.comp.loc.1 %in% actual.comp.loc)
# table(pred.comp.loc.2 %in% actual.comp.loc)
# table(pred.comp.loc.3 %in% actual.comp.loc)
# table(pred.comp.loc.4 %in% actual.comp.loc)
# 
###############################################################################################
####################      Sensitivity         #################################################
###############################################################################################
training$pred.3 = pred.fit3
training$pred.4 = pred.fit4

diag.fn = function(temp){
  TP = length(which(rowSums(temp)==2))
  TN = length(which(rowSums(temp)==0))
  FP = length(which(temp[,1]==0 & temp[,2]==1))
  FN = length(which(temp[,1]==1 & temp[,2]==0))
  sens = TP/(TP+FN)
  spec = TN/(TN+FP)
  prec = TP/(TP+FP)
  acc = (TP+TN)/(TP+FP+FN+TN)
  return (list(sens = sens, spec = spec, prec = prec, acc = acc))
}


diag.fn(training[,c('first_completed','pred.3')])

diag.fn(training[,c('first_completed','pred.4')])


###############################################################################################
####################      Diagnostics Plots         ###########################################
###############################################################################################
presids = residuals(fit3, type='pearson')
muhat = fitted(fit3)
windows()
plot(muhat, presids^2, xlim=c(0,0.6), ylim=c(0,5),
     xlab='Fitted probability', ylab='Pearson Residual Squared')
sfit = loess(presids^2 ~ muhat)
lines(sfit$x[order(sfit$x)], fitted(sfit)[order(sfit$x)],, col='red', lwd=2)

####
presids = residuals(fit4, type='pearson')
muhat = fitted(fit4)
windows()
plot(muhat, presids^2, xlim=c(0,0.6), ylim=c(0,5),
     xlab='Fitted probability', ylab='Pearson Residual Squared')
sfit = loess(presids^2 ~ muhat)
lines(sfit$x[order(sfit$x)], fitted(sfit)[order(sfit$x)],, col='red', lwd=2)

###############################################################################################
####################      Diagnostics          ###########################################
###############################################################################################
lrtest(fit3,fit2)
lrtest(fit4,fit3)
HLgof.test(fit = fitted(fit3), obs = training$first_completed)
HLgof.test(fit = fitted(fit4), obs = training$first_completed)

# pred = predict(fit3, newdata=testing)
# accuracy <- table(pred, testing[,"first_completed"])
# sum(diag(accuracy))/sum(accuracy)
# ## [1] 0.705
# pred = predict(fit3, newdata=testing)
# confusionMatrix(data=pred, testing$first_completed)

testing$vehicle_year = testing$vehicle_year - 1995

pred = predict(fit3, newdata=testing, type='response')
testing$pred = ifelse(pred > 0.5,1,0)
diag.fn(testing[,c('first_completed','pred')])


pred = predict(fit4, newdata=testing, type='response')
testing$pred = ifelse(pred > 0.5,1,0)
diag.fn(testing[,c('first_completed','pred')])

##################
library(ROCR)
library(ggplot2)
prob = predict(fit3, newdata=testing, type='response')
pred = prediction(prob, testing$first_completed)
perf = performance(pred, measure='tpr',x.measure='fpr')
auc = performance(pred,measure='auc')
auc = auc@y.values[[1]]

roc.data = data.frame(fpr=unlist(perf@x.values),
                      tpr=unlist(perf@y.values),
                      model='GLM')

windows()
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
  geom_ribbon(alpha=0.2) +
  geom_line(aes(y=tpr)) +
  ggtitle(paste0("ROC Curve w/ AUC=", auc))

#####
prob = predict(fit4, newdata=testing, type='response')
pred = prediction(prob, testing$first_completed)
perf = performance(pred, measure='tpr',x.measure='fpr')
auc = performance(pred,measure='auc')
auc = auc@y.values[[1]]

roc.data = data.frame(fpr=unlist(perf@x.values),
                      tpr=unlist(perf@y.values),
                      model='GLM')

windows()
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
  geom_ribbon(alpha=0.2) +
  geom_line(aes(y=tpr)) +
  ggtitle(paste0("ROC Curve w/ AUC=", auc))

###############################################################################################
####################      NOTES         #######################################################
###############################################################################################
### If one didn't have background check, will never complete his first trip
# remove anyone without background check 
# background check isn't a predictor variable due to lack of variability
### vehicle_make, vehicle_model, vehicle_year are similar
# that is, if there's no data for one of the variables, no data is available for the others
# vehicle_year_date also about the same, so is used as predictor variable, represent anything related to vehicle
### city_name, signup_os are NOT predictors since there almost no difference between 
### signup_channel IS a predictor
